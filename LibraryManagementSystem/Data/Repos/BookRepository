public class BookRepository : IBookRepository
{
    private readonly DatabaseContext _context;

    public BookRepository(DatabaseContext context)
    {
        _context = context;
    }

    public async Task AddBookAsync(BookModel book)
    {
        _context.Books.Add(book);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateBookAsync(BookModel book)
    {
        _context.Books.Update(book);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteBookAsync(int bookId)
    {
        var book = await _context.Books.FindAsync(bookId);
        if (book != null)
        {
            _context.Books.Remove(book);
            await _context.SaveChangesAsync();
        }
    }

    public async Task<BookModel> GetBookByIdAsync(int bookId)
    {
        return await _context.Books.FindAsync(bookId);
    }

    public async Task<IEnumerable<BookModel>> GetAllBooksAsync()
    {
        return await _context.Books.ToListAsync();
    }

    public async Task<IEnumerable<BookModel>> GetBooksByTitleAsync(string title)
    {
        return await _context.Books
                             .Where(b => b.Title.Contains(title))
                             .ToListAsync();
    }

    public async Task<IEnumerable<BookModel>> GetBooksByAuthorAsync(string author)
    {
        return await _context.Books
                             .Where(b => b.Author.Contains(author))
                             .ToListAsync();
    }

    public async Task<BookModel> GetBookByISBNAsync(string isbn)
    {
        return await _context.Books
                             .FirstOrDefaultAsync(b => b.ISBN == isbn);
    }

    public async Task<IEnumerable<BookModel>> GetBooksByStatusAsync(BookStatus status)
    {
        return await _context.Books
                             .Where(b => b.Status == status)
                             .ToListAsync();
    }

    public async Task UpdateBookStatusAsync(int bookId, BookStatus status)
    {
        var book = await _context.Books.FindAsync(bookId);
        if (book != null)
        {
            book.Status = status;
            await _context.SaveChangesAsync();
        }
    }

    public async Task<IEnumerable<BookModel>> GetBooksWithLowQuantityAsync(int threshold)
    {
        return await _context.Books
                             .Where(b => b.Quantity < threshold)
                             .ToListAsync();
    }

    // Implement other methods as needed
}

// Assuming the DatabaseContext is already defined somewhere with DbSet<BookModel> Books
